// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(PosDbContext))]
    partial class PosDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Model.Entities.Employee", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<Guid?>("RoleGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_guid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Guid");

                    b.HasIndex("RoleGuid");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("tb_m_employee");
                });

            modelBuilder.Entity("API.Model.Entities.Product", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("BarcodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("barcode_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("title");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_product");
                });

            modelBuilder.Entity("API.Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_role");
                });

            modelBuilder.Entity("API.Model.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid?>("EmployeeGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("employee_guid");

                    b.Property<decimal?>("TotalAmmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_ammount");

                    b.Property<DateTime>("TransactionsDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.HasKey("Guid");

                    b.HasIndex("EmployeeGuid");

                    b.ToTable("tb_tr_transaction");
                });

            modelBuilder.Entity("API.Model.Entities.TransactionItem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<Guid?>("PriceGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("price_guid");

                    b.Property<Guid?>("ProductGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_guid");

                    b.Property<float>("Quantity")
                        .HasColumnType("real")
                        .HasColumnName("quantity");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("subtotal");

                    b.Property<Guid?>("TransactionGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("transaction_guid");

                    b.HasKey("Guid");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("TransactionGuid");

                    b.ToTable("tb_m_transaction_item");
                });

            modelBuilder.Entity("API.Model.Entities.Unit", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("tb_m_unit");
                });

            modelBuilder.Entity("API.Models.Entities.Price", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("ProductGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("product_guid");

                    b.Property<Guid?>("UnitGuid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("price_guid");

                    b.HasKey("Guid");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("UnitGuid");

                    b.ToTable("tb_tr_price");
                });

            modelBuilder.Entity("API.Model.Entities.Employee", b =>
                {
                    b.HasOne("API.Model.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("API.Model.Entities.Transaction", b =>
                {
                    b.HasOne("API.Model.Entities.Employee", "Employee")
                        .WithMany("Transactions")
                        .HasForeignKey("EmployeeGuid");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Model.Entities.TransactionItem", b =>
                {
                    b.HasOne("API.Model.Entities.Product", "Product")
                        .WithMany("TransactionItems")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Model.Entities.Transaction", "Transaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Models.Entities.Price", "Price")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Price");

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("API.Models.Entities.Price", b =>
                {
                    b.HasOne("API.Model.Entities.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("API.Model.Entities.Unit", "Unit")
                        .WithMany("Prices")
                        .HasForeignKey("UnitGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("API.Model.Entities.Employee", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("API.Model.Entities.Product", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("TransactionItems");
                });

            modelBuilder.Entity("API.Model.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Model.Entities.Transaction", b =>
                {
                    b.Navigation("TransactionItems");
                });

            modelBuilder.Entity("API.Model.Entities.Unit", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("API.Models.Entities.Price", b =>
                {
                    b.Navigation("TransactionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
